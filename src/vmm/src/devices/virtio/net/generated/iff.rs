// Copyright 2025 Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

// automatically generated by tools/bindgen.sh

#![allow(
    non_camel_case_types,
    non_upper_case_globals,
    dead_code,
    non_snake_case,
    clippy::ptr_as_ptr,
    clippy::undocumented_unsafe_blocks,
    missing_debug_implementations,
    clippy::tests_outside_test_module,
    unsafe_op_in_unsafe_fn
)]

pub const IFNAMSIZ: u32 = 16;
pub const IFALIASZ: u32 = 256;
pub const IF_GET_IFACE: u32 = 1;
pub const IF_GET_PROTO: u32 = 2;
pub const IF_IFACE_V35: u32 = 4096;
pub const IF_IFACE_V24: u32 = 4097;
pub const IF_IFACE_X21: u32 = 4098;
pub const IF_IFACE_T1: u32 = 4099;
pub const IF_IFACE_E1: u32 = 4100;
pub const IF_IFACE_SYNC_SERIAL: u32 = 4101;
pub const IF_IFACE_X21D: u32 = 4102;
pub const IF_PROTO_HDLC: u32 = 8192;
pub const IF_PROTO_PPP: u32 = 8193;
pub const IF_PROTO_CISCO: u32 = 8194;
pub const IF_PROTO_FR: u32 = 8195;
pub const IF_PROTO_FR_ADD_PVC: u32 = 8196;
pub const IF_PROTO_FR_DEL_PVC: u32 = 8197;
pub const IF_PROTO_X25: u32 = 8198;
pub const IF_PROTO_HDLC_ETH: u32 = 8199;
pub const IF_PROTO_FR_ADD_ETH_PVC: u32 = 8200;
pub const IF_PROTO_FR_DEL_ETH_PVC: u32 = 8201;
pub const IF_PROTO_FR_PVC: u32 = 8202;
pub const IF_PROTO_FR_ETH_PVC: u32 = 8203;
pub const IF_PROTO_RAW: u32 = 8204;
pub const IFHWADDRLEN: u32 = 6;
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr"][::std::mem::size_of::<sockaddr>() - 16usize];
    ["Alignment of sockaddr"][::std::mem::align_of::<sockaddr>() - 2usize];
    ["Offset of field: sockaddr::sa_family"][::std::mem::offset_of!(sockaddr, sa_family) - 0usize];
    ["Offset of field: sockaddr::sa_data"][::std::mem::offset_of!(sockaddr, sa_data) - 2usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct sync_serial_settings {
    pub clock_rate: ::std::os::raw::c_uint,
    pub clock_type: ::std::os::raw::c_uint,
    pub loopback: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sync_serial_settings"][::std::mem::size_of::<sync_serial_settings>() - 12usize];
    ["Alignment of sync_serial_settings"][::std::mem::align_of::<sync_serial_settings>() - 4usize];
    ["Offset of field: sync_serial_settings::clock_rate"]
        [::std::mem::offset_of!(sync_serial_settings, clock_rate) - 0usize];
    ["Offset of field: sync_serial_settings::clock_type"]
        [::std::mem::offset_of!(sync_serial_settings, clock_type) - 4usize];
    ["Offset of field: sync_serial_settings::loopback"]
        [::std::mem::offset_of!(sync_serial_settings, loopback) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct te1_settings {
    pub clock_rate: ::std::os::raw::c_uint,
    pub clock_type: ::std::os::raw::c_uint,
    pub loopback: ::std::os::raw::c_ushort,
    pub slot_map: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of te1_settings"][::std::mem::size_of::<te1_settings>() - 16usize];
    ["Alignment of te1_settings"][::std::mem::align_of::<te1_settings>() - 4usize];
    ["Offset of field: te1_settings::clock_rate"]
        [::std::mem::offset_of!(te1_settings, clock_rate) - 0usize];
    ["Offset of field: te1_settings::clock_type"]
        [::std::mem::offset_of!(te1_settings, clock_type) - 4usize];
    ["Offset of field: te1_settings::loopback"]
        [::std::mem::offset_of!(te1_settings, loopback) - 8usize];
    ["Offset of field: te1_settings::slot_map"]
        [::std::mem::offset_of!(te1_settings, slot_map) - 12usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct raw_hdlc_proto {
    pub encoding: ::std::os::raw::c_ushort,
    pub parity: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of raw_hdlc_proto"][::std::mem::size_of::<raw_hdlc_proto>() - 4usize];
    ["Alignment of raw_hdlc_proto"][::std::mem::align_of::<raw_hdlc_proto>() - 2usize];
    ["Offset of field: raw_hdlc_proto::encoding"]
        [::std::mem::offset_of!(raw_hdlc_proto, encoding) - 0usize];
    ["Offset of field: raw_hdlc_proto::parity"]
        [::std::mem::offset_of!(raw_hdlc_proto, parity) - 2usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct fr_proto {
    pub t391: ::std::os::raw::c_uint,
    pub t392: ::std::os::raw::c_uint,
    pub n391: ::std::os::raw::c_uint,
    pub n392: ::std::os::raw::c_uint,
    pub n393: ::std::os::raw::c_uint,
    pub lmi: ::std::os::raw::c_ushort,
    pub dce: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fr_proto"][::std::mem::size_of::<fr_proto>() - 24usize];
    ["Alignment of fr_proto"][::std::mem::align_of::<fr_proto>() - 4usize];
    ["Offset of field: fr_proto::t391"][::std::mem::offset_of!(fr_proto, t391) - 0usize];
    ["Offset of field: fr_proto::t392"][::std::mem::offset_of!(fr_proto, t392) - 4usize];
    ["Offset of field: fr_proto::n391"][::std::mem::offset_of!(fr_proto, n391) - 8usize];
    ["Offset of field: fr_proto::n392"][::std::mem::offset_of!(fr_proto, n392) - 12usize];
    ["Offset of field: fr_proto::n393"][::std::mem::offset_of!(fr_proto, n393) - 16usize];
    ["Offset of field: fr_proto::lmi"][::std::mem::offset_of!(fr_proto, lmi) - 20usize];
    ["Offset of field: fr_proto::dce"][::std::mem::offset_of!(fr_proto, dce) - 22usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct fr_proto_pvc {
    pub dlci: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fr_proto_pvc"][::std::mem::size_of::<fr_proto_pvc>() - 4usize];
    ["Alignment of fr_proto_pvc"][::std::mem::align_of::<fr_proto_pvc>() - 4usize];
    ["Offset of field: fr_proto_pvc::dlci"][::std::mem::offset_of!(fr_proto_pvc, dlci) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct fr_proto_pvc_info {
    pub dlci: ::std::os::raw::c_uint,
    pub master: [::std::os::raw::c_char; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fr_proto_pvc_info"][::std::mem::size_of::<fr_proto_pvc_info>() - 20usize];
    ["Alignment of fr_proto_pvc_info"][::std::mem::align_of::<fr_proto_pvc_info>() - 4usize];
    ["Offset of field: fr_proto_pvc_info::dlci"]
        [::std::mem::offset_of!(fr_proto_pvc_info, dlci) - 0usize];
    ["Offset of field: fr_proto_pvc_info::master"]
        [::std::mem::offset_of!(fr_proto_pvc_info, master) - 4usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct cisco_proto {
    pub interval: ::std::os::raw::c_uint,
    pub timeout: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cisco_proto"][::std::mem::size_of::<cisco_proto>() - 8usize];
    ["Alignment of cisco_proto"][::std::mem::align_of::<cisco_proto>() - 4usize];
    ["Offset of field: cisco_proto::interval"]
        [::std::mem::offset_of!(cisco_proto, interval) - 0usize];
    ["Offset of field: cisco_proto::timeout"]
        [::std::mem::offset_of!(cisco_proto, timeout) - 4usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct x25_hdlc_proto {
    pub dce: ::std::os::raw::c_ushort,
    pub modulo: ::std::os::raw::c_uint,
    pub window: ::std::os::raw::c_uint,
    pub t1: ::std::os::raw::c_uint,
    pub t2: ::std::os::raw::c_uint,
    pub n2: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of x25_hdlc_proto"][::std::mem::size_of::<x25_hdlc_proto>() - 24usize];
    ["Alignment of x25_hdlc_proto"][::std::mem::align_of::<x25_hdlc_proto>() - 4usize];
    ["Offset of field: x25_hdlc_proto::dce"][::std::mem::offset_of!(x25_hdlc_proto, dce) - 0usize];
    ["Offset of field: x25_hdlc_proto::modulo"]
        [::std::mem::offset_of!(x25_hdlc_proto, modulo) - 4usize];
    ["Offset of field: x25_hdlc_proto::window"]
        [::std::mem::offset_of!(x25_hdlc_proto, window) - 8usize];
    ["Offset of field: x25_hdlc_proto::t1"][::std::mem::offset_of!(x25_hdlc_proto, t1) - 12usize];
    ["Offset of field: x25_hdlc_proto::t2"][::std::mem::offset_of!(x25_hdlc_proto, t2) - 16usize];
    ["Offset of field: x25_hdlc_proto::n2"][::std::mem::offset_of!(x25_hdlc_proto, n2) - 20usize];
};
pub const net_device_flags_IFF_UP: net_device_flags = 1;
pub const net_device_flags_IFF_BROADCAST: net_device_flags = 2;
pub const net_device_flags_IFF_DEBUG: net_device_flags = 4;
pub const net_device_flags_IFF_LOOPBACK: net_device_flags = 8;
pub const net_device_flags_IFF_POINTOPOINT: net_device_flags = 16;
pub const net_device_flags_IFF_NOTRAILERS: net_device_flags = 32;
pub const net_device_flags_IFF_RUNNING: net_device_flags = 64;
pub const net_device_flags_IFF_NOARP: net_device_flags = 128;
pub const net_device_flags_IFF_PROMISC: net_device_flags = 256;
pub const net_device_flags_IFF_ALLMULTI: net_device_flags = 512;
pub const net_device_flags_IFF_MASTER: net_device_flags = 1024;
pub const net_device_flags_IFF_SLAVE: net_device_flags = 2048;
pub const net_device_flags_IFF_MULTICAST: net_device_flags = 4096;
pub const net_device_flags_IFF_PORTSEL: net_device_flags = 8192;
pub const net_device_flags_IFF_AUTOMEDIA: net_device_flags = 16384;
pub const net_device_flags_IFF_DYNAMIC: net_device_flags = 32768;
pub const net_device_flags_IFF_LOWER_UP: net_device_flags = 65536;
pub const net_device_flags_IFF_DORMANT: net_device_flags = 131072;
pub const net_device_flags_IFF_ECHO: net_device_flags = 262144;
pub type net_device_flags = ::std::os::raw::c_uint;
pub const IF_OPER_UNKNOWN: _bindgen_ty_4 = 0;
pub const IF_OPER_NOTPRESENT: _bindgen_ty_4 = 1;
pub const IF_OPER_DOWN: _bindgen_ty_4 = 2;
pub const IF_OPER_LOWERLAYERDOWN: _bindgen_ty_4 = 3;
pub const IF_OPER_TESTING: _bindgen_ty_4 = 4;
pub const IF_OPER_DORMANT: _bindgen_ty_4 = 5;
pub const IF_OPER_UP: _bindgen_ty_4 = 6;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
pub const IF_LINK_MODE_DEFAULT: _bindgen_ty_5 = 0;
pub const IF_LINK_MODE_DORMANT: _bindgen_ty_5 = 1;
pub const IF_LINK_MODE_TESTING: _bindgen_ty_5 = 2;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ifmap {
    pub mem_start: ::std::os::raw::c_ulong,
    pub mem_end: ::std::os::raw::c_ulong,
    pub base_addr: ::std::os::raw::c_ushort,
    pub irq: ::std::os::raw::c_uchar,
    pub dma: ::std::os::raw::c_uchar,
    pub port: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ifmap"][::std::mem::size_of::<ifmap>() - 24usize];
    ["Alignment of ifmap"][::std::mem::align_of::<ifmap>() - 8usize];
    ["Offset of field: ifmap::mem_start"][::std::mem::offset_of!(ifmap, mem_start) - 0usize];
    ["Offset of field: ifmap::mem_end"][::std::mem::offset_of!(ifmap, mem_end) - 8usize];
    ["Offset of field: ifmap::base_addr"][::std::mem::offset_of!(ifmap, base_addr) - 16usize];
    ["Offset of field: ifmap::irq"][::std::mem::offset_of!(ifmap, irq) - 18usize];
    ["Offset of field: ifmap::dma"][::std::mem::offset_of!(ifmap, dma) - 19usize];
    ["Offset of field: ifmap::port"][::std::mem::offset_of!(ifmap, port) - 20usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct if_settings {
    pub type_: ::std::os::raw::c_uint,
    pub size: ::std::os::raw::c_uint,
    pub ifs_ifsu: if_settings__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union if_settings__bindgen_ty_1 {
    pub raw_hdlc: *mut raw_hdlc_proto,
    pub cisco: *mut cisco_proto,
    pub fr: *mut fr_proto,
    pub fr_pvc: *mut fr_proto_pvc,
    pub fr_pvc_info: *mut fr_proto_pvc_info,
    pub x25: *mut x25_hdlc_proto,
    pub sync: *mut sync_serial_settings,
    pub te1: *mut te1_settings,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of if_settings__bindgen_ty_1"]
        [::std::mem::size_of::<if_settings__bindgen_ty_1>() - 8usize];
    ["Alignment of if_settings__bindgen_ty_1"]
        [::std::mem::align_of::<if_settings__bindgen_ty_1>() - 8usize];
    ["Offset of field: if_settings__bindgen_ty_1::raw_hdlc"]
        [::std::mem::offset_of!(if_settings__bindgen_ty_1, raw_hdlc) - 0usize];
    ["Offset of field: if_settings__bindgen_ty_1::cisco"]
        [::std::mem::offset_of!(if_settings__bindgen_ty_1, cisco) - 0usize];
    ["Offset of field: if_settings__bindgen_ty_1::fr"]
        [::std::mem::offset_of!(if_settings__bindgen_ty_1, fr) - 0usize];
    ["Offset of field: if_settings__bindgen_ty_1::fr_pvc"]
        [::std::mem::offset_of!(if_settings__bindgen_ty_1, fr_pvc) - 0usize];
    ["Offset of field: if_settings__bindgen_ty_1::fr_pvc_info"]
        [::std::mem::offset_of!(if_settings__bindgen_ty_1, fr_pvc_info) - 0usize];
    ["Offset of field: if_settings__bindgen_ty_1::x25"]
        [::std::mem::offset_of!(if_settings__bindgen_ty_1, x25) - 0usize];
    ["Offset of field: if_settings__bindgen_ty_1::sync"]
        [::std::mem::offset_of!(if_settings__bindgen_ty_1, sync) - 0usize];
    ["Offset of field: if_settings__bindgen_ty_1::te1"]
        [::std::mem::offset_of!(if_settings__bindgen_ty_1, te1) - 0usize];
};
impl Default for if_settings__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of if_settings"][::std::mem::size_of::<if_settings>() - 16usize];
    ["Alignment of if_settings"][::std::mem::align_of::<if_settings>() - 8usize];
    ["Offset of field: if_settings::type_"][::std::mem::offset_of!(if_settings, type_) - 0usize];
    ["Offset of field: if_settings::size"][::std::mem::offset_of!(if_settings, size) - 4usize];
    ["Offset of field: if_settings::ifs_ifsu"]
        [::std::mem::offset_of!(if_settings, ifs_ifsu) - 8usize];
};
impl Default for if_settings {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ifreq {
    pub ifr_ifrn: ifreq__bindgen_ty_1,
    pub ifr_ifru: ifreq__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ifreq__bindgen_ty_1 {
    pub ifrn_name: [::std::os::raw::c_uchar; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ifreq__bindgen_ty_1"][::std::mem::size_of::<ifreq__bindgen_ty_1>() - 16usize];
    ["Alignment of ifreq__bindgen_ty_1"][::std::mem::align_of::<ifreq__bindgen_ty_1>() - 1usize];
    ["Offset of field: ifreq__bindgen_ty_1::ifrn_name"]
        [::std::mem::offset_of!(ifreq__bindgen_ty_1, ifrn_name) - 0usize];
};
impl Default for ifreq__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ifreq__bindgen_ty_2 {
    pub ifru_addr: sockaddr,
    pub ifru_dstaddr: sockaddr,
    pub ifru_broadaddr: sockaddr,
    pub ifru_netmask: sockaddr,
    pub ifru_hwaddr: sockaddr,
    pub ifru_flags: ::std::os::raw::c_short,
    pub ifru_ivalue: ::std::os::raw::c_int,
    pub ifru_mtu: ::std::os::raw::c_int,
    pub ifru_map: ifmap,
    pub ifru_slave: [::std::os::raw::c_char; 16usize],
    pub ifru_newname: [::std::os::raw::c_char; 16usize],
    pub ifru_data: *mut ::std::os::raw::c_void,
    pub ifru_settings: if_settings,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ifreq__bindgen_ty_2"][::std::mem::size_of::<ifreq__bindgen_ty_2>() - 24usize];
    ["Alignment of ifreq__bindgen_ty_2"][::std::mem::align_of::<ifreq__bindgen_ty_2>() - 8usize];
    ["Offset of field: ifreq__bindgen_ty_2::ifru_addr"]
        [::std::mem::offset_of!(ifreq__bindgen_ty_2, ifru_addr) - 0usize];
    ["Offset of field: ifreq__bindgen_ty_2::ifru_dstaddr"]
        [::std::mem::offset_of!(ifreq__bindgen_ty_2, ifru_dstaddr) - 0usize];
    ["Offset of field: ifreq__bindgen_ty_2::ifru_broadaddr"]
        [::std::mem::offset_of!(ifreq__bindgen_ty_2, ifru_broadaddr) - 0usize];
    ["Offset of field: ifreq__bindgen_ty_2::ifru_netmask"]
        [::std::mem::offset_of!(ifreq__bindgen_ty_2, ifru_netmask) - 0usize];
    ["Offset of field: ifreq__bindgen_ty_2::ifru_hwaddr"]
        [::std::mem::offset_of!(ifreq__bindgen_ty_2, ifru_hwaddr) - 0usize];
    ["Offset of field: ifreq__bindgen_ty_2::ifru_flags"]
        [::std::mem::offset_of!(ifreq__bindgen_ty_2, ifru_flags) - 0usize];
    ["Offset of field: ifreq__bindgen_ty_2::ifru_ivalue"]
        [::std::mem::offset_of!(ifreq__bindgen_ty_2, ifru_ivalue) - 0usize];
    ["Offset of field: ifreq__bindgen_ty_2::ifru_mtu"]
        [::std::mem::offset_of!(ifreq__bindgen_ty_2, ifru_mtu) - 0usize];
    ["Offset of field: ifreq__bindgen_ty_2::ifru_map"]
        [::std::mem::offset_of!(ifreq__bindgen_ty_2, ifru_map) - 0usize];
    ["Offset of field: ifreq__bindgen_ty_2::ifru_slave"]
        [::std::mem::offset_of!(ifreq__bindgen_ty_2, ifru_slave) - 0usize];
    ["Offset of field: ifreq__bindgen_ty_2::ifru_newname"]
        [::std::mem::offset_of!(ifreq__bindgen_ty_2, ifru_newname) - 0usize];
    ["Offset of field: ifreq__bindgen_ty_2::ifru_data"]
        [::std::mem::offset_of!(ifreq__bindgen_ty_2, ifru_data) - 0usize];
    ["Offset of field: ifreq__bindgen_ty_2::ifru_settings"]
        [::std::mem::offset_of!(ifreq__bindgen_ty_2, ifru_settings) - 0usize];
};
impl Default for ifreq__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ifreq"][::std::mem::size_of::<ifreq>() - 40usize];
    ["Alignment of ifreq"][::std::mem::align_of::<ifreq>() - 8usize];
    ["Offset of field: ifreq::ifr_ifrn"][::std::mem::offset_of!(ifreq, ifr_ifrn) - 0usize];
    ["Offset of field: ifreq::ifr_ifru"][::std::mem::offset_of!(ifreq, ifr_ifru) - 16usize];
};
impl Default for ifreq {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ifconf {
    pub ifc_len: ::std::os::raw::c_int,
    pub ifc_ifcu: ifconf__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ifconf__bindgen_ty_1 {
    pub ifcu_buf: *mut ::std::os::raw::c_char,
    pub ifcu_req: *mut ifreq,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ifconf__bindgen_ty_1"][::std::mem::size_of::<ifconf__bindgen_ty_1>() - 8usize];
    ["Alignment of ifconf__bindgen_ty_1"][::std::mem::align_of::<ifconf__bindgen_ty_1>() - 8usize];
    ["Offset of field: ifconf__bindgen_ty_1::ifcu_buf"]
        [::std::mem::offset_of!(ifconf__bindgen_ty_1, ifcu_buf) - 0usize];
    ["Offset of field: ifconf__bindgen_ty_1::ifcu_req"]
        [::std::mem::offset_of!(ifconf__bindgen_ty_1, ifcu_req) - 0usize];
};
impl Default for ifconf__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ifconf"][::std::mem::size_of::<ifconf>() - 16usize];
    ["Alignment of ifconf"][::std::mem::align_of::<ifconf>() - 8usize];
    ["Offset of field: ifconf::ifc_len"][::std::mem::offset_of!(ifconf, ifc_len) - 0usize];
    ["Offset of field: ifconf::ifc_ifcu"][::std::mem::offset_of!(ifconf, ifc_ifcu) - 8usize];
};
impl Default for ifconf {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
