// Copyright 2025 Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

// automatically generated by tools/bindgen.sh

#![allow(
    non_camel_case_types,
    non_upper_case_globals,
    dead_code,
    non_snake_case,
    clippy::ptr_as_ptr,
    clippy::undocumented_unsafe_blocks,
    missing_debug_implementations,
    clippy::tests_outside_test_module,
    unsafe_op_in_unsafe_fn
)]

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const IORING_SETUP_IOPOLL: u32 = 1;
pub const IORING_SETUP_SQPOLL: u32 = 2;
pub const IORING_SETUP_SQ_AFF: u32 = 4;
pub const IORING_SETUP_CQSIZE: u32 = 8;
pub const IORING_SETUP_CLAMP: u32 = 16;
pub const IORING_SETUP_ATTACH_WQ: u32 = 32;
pub const IORING_SETUP_R_DISABLED: u32 = 64;
pub const IORING_FSYNC_DATASYNC: u32 = 1;
pub const IORING_TIMEOUT_ABS: u32 = 1;
pub const IORING_TIMEOUT_UPDATE: u32 = 2;
pub const IORING_TIMEOUT_BOOTTIME: u32 = 4;
pub const IORING_TIMEOUT_REALTIME: u32 = 8;
pub const IORING_LINK_TIMEOUT_UPDATE: u32 = 16;
pub const IORING_TIMEOUT_CLOCK_MASK: u32 = 12;
pub const IORING_TIMEOUT_UPDATE_MASK: u32 = 18;
pub const IORING_POLL_ADD_MULTI: u32 = 1;
pub const IORING_POLL_UPDATE_EVENTS: u32 = 2;
pub const IORING_POLL_UPDATE_USER_DATA: u32 = 4;
pub const IORING_CQE_F_BUFFER: u32 = 1;
pub const IORING_CQE_F_MORE: u32 = 2;
pub const IORING_OFF_SQ_RING: u32 = 0;
pub const IORING_OFF_CQ_RING: u32 = 134217728;
pub const IORING_OFF_SQES: u32 = 268435456;
pub const IORING_SQ_NEED_WAKEUP: u32 = 1;
pub const IORING_SQ_CQ_OVERFLOW: u32 = 2;
pub const IORING_CQ_EVENTFD_DISABLED: u32 = 1;
pub const IORING_ENTER_GETEVENTS: u32 = 1;
pub const IORING_ENTER_SQ_WAKEUP: u32 = 2;
pub const IORING_ENTER_SQ_WAIT: u32 = 4;
pub const IORING_ENTER_EXT_ARG: u32 = 8;
pub const IORING_FEAT_SINGLE_MMAP: u32 = 1;
pub const IORING_FEAT_NODROP: u32 = 2;
pub const IORING_FEAT_SUBMIT_STABLE: u32 = 4;
pub const IORING_FEAT_RW_CUR_POS: u32 = 8;
pub const IORING_FEAT_CUR_PERSONALITY: u32 = 16;
pub const IORING_FEAT_FAST_POLL: u32 = 32;
pub const IORING_FEAT_POLL_32BITS: u32 = 64;
pub const IORING_FEAT_SQPOLL_NONFIXED: u32 = 128;
pub const IORING_FEAT_EXT_ARG: u32 = 256;
pub const IORING_FEAT_NATIVE_WORKERS: u32 = 512;
pub const IORING_FEAT_RSRC_TAGS: u32 = 1024;
pub const IORING_REGISTER_FILES_SKIP: i32 = -2;
pub const IO_URING_OP_SUPPORTED: u32 = 1;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __u64 = ::std::os::raw::c_ulonglong;
pub type __kernel_rwf_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_uring_sqe {
    pub opcode: __u8,
    pub flags: __u8,
    pub ioprio: __u16,
    pub fd: __s32,
    pub __bindgen_anon_1: io_uring_sqe__bindgen_ty_1,
    pub __bindgen_anon_2: io_uring_sqe__bindgen_ty_2,
    pub len: __u32,
    pub __bindgen_anon_3: io_uring_sqe__bindgen_ty_3,
    pub user_data: __u64,
    pub __bindgen_anon_4: io_uring_sqe__bindgen_ty_4,
    pub personality: __u16,
    pub __bindgen_anon_5: io_uring_sqe__bindgen_ty_5,
    pub __pad2: [__u64; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union io_uring_sqe__bindgen_ty_1 {
    pub off: __u64,
    pub addr2: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_sqe__bindgen_ty_1"]
        [::std::mem::size_of::<io_uring_sqe__bindgen_ty_1>() - 8usize];
    ["Alignment of io_uring_sqe__bindgen_ty_1"]
        [::std::mem::align_of::<io_uring_sqe__bindgen_ty_1>() - 8usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_1::off"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_1, off) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_1::addr2"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_1, addr2) - 0usize];
};
impl Default for io_uring_sqe__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union io_uring_sqe__bindgen_ty_2 {
    pub addr: __u64,
    pub splice_off_in: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_sqe__bindgen_ty_2"]
        [::std::mem::size_of::<io_uring_sqe__bindgen_ty_2>() - 8usize];
    ["Alignment of io_uring_sqe__bindgen_ty_2"]
        [::std::mem::align_of::<io_uring_sqe__bindgen_ty_2>() - 8usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_2::addr"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_2, addr) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_2::splice_off_in"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_2, splice_off_in) - 0usize];
};
impl Default for io_uring_sqe__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union io_uring_sqe__bindgen_ty_3 {
    pub rw_flags: __kernel_rwf_t,
    pub fsync_flags: __u32,
    pub poll_events: __u16,
    pub poll32_events: __u32,
    pub sync_range_flags: __u32,
    pub msg_flags: __u32,
    pub timeout_flags: __u32,
    pub accept_flags: __u32,
    pub cancel_flags: __u32,
    pub open_flags: __u32,
    pub statx_flags: __u32,
    pub fadvise_advice: __u32,
    pub splice_flags: __u32,
    pub rename_flags: __u32,
    pub unlink_flags: __u32,
    pub hardlink_flags: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_sqe__bindgen_ty_3"]
        [::std::mem::size_of::<io_uring_sqe__bindgen_ty_3>() - 4usize];
    ["Alignment of io_uring_sqe__bindgen_ty_3"]
        [::std::mem::align_of::<io_uring_sqe__bindgen_ty_3>() - 4usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_3::rw_flags"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_3, rw_flags) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_3::fsync_flags"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_3, fsync_flags) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_3::poll_events"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_3, poll_events) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_3::poll32_events"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_3, poll32_events) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_3::sync_range_flags"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_3, sync_range_flags) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_3::msg_flags"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_3, msg_flags) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_3::timeout_flags"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_3, timeout_flags) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_3::accept_flags"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_3, accept_flags) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_3::cancel_flags"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_3, cancel_flags) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_3::open_flags"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_3, open_flags) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_3::statx_flags"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_3, statx_flags) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_3::fadvise_advice"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_3, fadvise_advice) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_3::splice_flags"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_3, splice_flags) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_3::rename_flags"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_3, rename_flags) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_3::unlink_flags"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_3, unlink_flags) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_3::hardlink_flags"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_3, hardlink_flags) - 0usize];
};
impl Default for io_uring_sqe__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub union io_uring_sqe__bindgen_ty_4 {
    pub buf_index: __u16,
    pub buf_group: __u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_sqe__bindgen_ty_4"]
        [::std::mem::size_of::<io_uring_sqe__bindgen_ty_4>() - 2usize];
    ["Alignment of io_uring_sqe__bindgen_ty_4"]
        [::std::mem::align_of::<io_uring_sqe__bindgen_ty_4>() - 1usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_4::buf_index"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_4, buf_index) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_4::buf_group"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_4, buf_group) - 0usize];
};
impl Default for io_uring_sqe__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union io_uring_sqe__bindgen_ty_5 {
    pub splice_fd_in: __s32,
    pub file_index: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_sqe__bindgen_ty_5"]
        [::std::mem::size_of::<io_uring_sqe__bindgen_ty_5>() - 4usize];
    ["Alignment of io_uring_sqe__bindgen_ty_5"]
        [::std::mem::align_of::<io_uring_sqe__bindgen_ty_5>() - 4usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_5::splice_fd_in"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_5, splice_fd_in) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_5::file_index"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_5, file_index) - 0usize];
};
impl Default for io_uring_sqe__bindgen_ty_5 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_sqe"][::std::mem::size_of::<io_uring_sqe>() - 64usize];
    ["Alignment of io_uring_sqe"][::std::mem::align_of::<io_uring_sqe>() - 8usize];
    ["Offset of field: io_uring_sqe::opcode"]
        [::std::mem::offset_of!(io_uring_sqe, opcode) - 0usize];
    ["Offset of field: io_uring_sqe::flags"][::std::mem::offset_of!(io_uring_sqe, flags) - 1usize];
    ["Offset of field: io_uring_sqe::ioprio"]
        [::std::mem::offset_of!(io_uring_sqe, ioprio) - 2usize];
    ["Offset of field: io_uring_sqe::fd"][::std::mem::offset_of!(io_uring_sqe, fd) - 4usize];
    ["Offset of field: io_uring_sqe::len"][::std::mem::offset_of!(io_uring_sqe, len) - 24usize];
    ["Offset of field: io_uring_sqe::user_data"]
        [::std::mem::offset_of!(io_uring_sqe, user_data) - 32usize];
    ["Offset of field: io_uring_sqe::personality"]
        [::std::mem::offset_of!(io_uring_sqe, personality) - 42usize];
    ["Offset of field: io_uring_sqe::__pad2"]
        [::std::mem::offset_of!(io_uring_sqe, __pad2) - 48usize];
};
impl Default for io_uring_sqe {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IOSQE_FIXED_FILE_BIT: _bindgen_ty_1 = 0;
pub const IOSQE_IO_DRAIN_BIT: _bindgen_ty_1 = 1;
pub const IOSQE_IO_LINK_BIT: _bindgen_ty_1 = 2;
pub const IOSQE_IO_HARDLINK_BIT: _bindgen_ty_1 = 3;
pub const IOSQE_ASYNC_BIT: _bindgen_ty_1 = 4;
pub const IOSQE_BUFFER_SELECT_BIT: _bindgen_ty_1 = 5;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const IORING_OP_NOP: _bindgen_ty_2 = 0;
pub const IORING_OP_READV: _bindgen_ty_2 = 1;
pub const IORING_OP_WRITEV: _bindgen_ty_2 = 2;
pub const IORING_OP_FSYNC: _bindgen_ty_2 = 3;
pub const IORING_OP_READ_FIXED: _bindgen_ty_2 = 4;
pub const IORING_OP_WRITE_FIXED: _bindgen_ty_2 = 5;
pub const IORING_OP_POLL_ADD: _bindgen_ty_2 = 6;
pub const IORING_OP_POLL_REMOVE: _bindgen_ty_2 = 7;
pub const IORING_OP_SYNC_FILE_RANGE: _bindgen_ty_2 = 8;
pub const IORING_OP_SENDMSG: _bindgen_ty_2 = 9;
pub const IORING_OP_RECVMSG: _bindgen_ty_2 = 10;
pub const IORING_OP_TIMEOUT: _bindgen_ty_2 = 11;
pub const IORING_OP_TIMEOUT_REMOVE: _bindgen_ty_2 = 12;
pub const IORING_OP_ACCEPT: _bindgen_ty_2 = 13;
pub const IORING_OP_ASYNC_CANCEL: _bindgen_ty_2 = 14;
pub const IORING_OP_LINK_TIMEOUT: _bindgen_ty_2 = 15;
pub const IORING_OP_CONNECT: _bindgen_ty_2 = 16;
pub const IORING_OP_FALLOCATE: _bindgen_ty_2 = 17;
pub const IORING_OP_OPENAT: _bindgen_ty_2 = 18;
pub const IORING_OP_CLOSE: _bindgen_ty_2 = 19;
pub const IORING_OP_FILES_UPDATE: _bindgen_ty_2 = 20;
pub const IORING_OP_STATX: _bindgen_ty_2 = 21;
pub const IORING_OP_READ: _bindgen_ty_2 = 22;
pub const IORING_OP_WRITE: _bindgen_ty_2 = 23;
pub const IORING_OP_FADVISE: _bindgen_ty_2 = 24;
pub const IORING_OP_MADVISE: _bindgen_ty_2 = 25;
pub const IORING_OP_SEND: _bindgen_ty_2 = 26;
pub const IORING_OP_RECV: _bindgen_ty_2 = 27;
pub const IORING_OP_OPENAT2: _bindgen_ty_2 = 28;
pub const IORING_OP_EPOLL_CTL: _bindgen_ty_2 = 29;
pub const IORING_OP_SPLICE: _bindgen_ty_2 = 30;
pub const IORING_OP_PROVIDE_BUFFERS: _bindgen_ty_2 = 31;
pub const IORING_OP_REMOVE_BUFFERS: _bindgen_ty_2 = 32;
pub const IORING_OP_TEE: _bindgen_ty_2 = 33;
pub const IORING_OP_SHUTDOWN: _bindgen_ty_2 = 34;
pub const IORING_OP_RENAMEAT: _bindgen_ty_2 = 35;
pub const IORING_OP_UNLINKAT: _bindgen_ty_2 = 36;
pub const IORING_OP_LAST: _bindgen_ty_2 = 37;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct io_uring_cqe {
    pub user_data: __u64,
    pub res: __s32,
    pub flags: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_cqe"][::std::mem::size_of::<io_uring_cqe>() - 16usize];
    ["Alignment of io_uring_cqe"][::std::mem::align_of::<io_uring_cqe>() - 8usize];
    ["Offset of field: io_uring_cqe::user_data"]
        [::std::mem::offset_of!(io_uring_cqe, user_data) - 0usize];
    ["Offset of field: io_uring_cqe::res"][::std::mem::offset_of!(io_uring_cqe, res) - 8usize];
    ["Offset of field: io_uring_cqe::flags"][::std::mem::offset_of!(io_uring_cqe, flags) - 12usize];
};
pub const IORING_CQE_BUFFER_SHIFT: _bindgen_ty_3 = 16;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct io_sqring_offsets {
    pub head: __u32,
    pub tail: __u32,
    pub ring_mask: __u32,
    pub ring_entries: __u32,
    pub flags: __u32,
    pub dropped: __u32,
    pub array: __u32,
    pub resv1: __u32,
    pub resv2: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_sqring_offsets"][::std::mem::size_of::<io_sqring_offsets>() - 40usize];
    ["Alignment of io_sqring_offsets"][::std::mem::align_of::<io_sqring_offsets>() - 8usize];
    ["Offset of field: io_sqring_offsets::head"]
        [::std::mem::offset_of!(io_sqring_offsets, head) - 0usize];
    ["Offset of field: io_sqring_offsets::tail"]
        [::std::mem::offset_of!(io_sqring_offsets, tail) - 4usize];
    ["Offset of field: io_sqring_offsets::ring_mask"]
        [::std::mem::offset_of!(io_sqring_offsets, ring_mask) - 8usize];
    ["Offset of field: io_sqring_offsets::ring_entries"]
        [::std::mem::offset_of!(io_sqring_offsets, ring_entries) - 12usize];
    ["Offset of field: io_sqring_offsets::flags"]
        [::std::mem::offset_of!(io_sqring_offsets, flags) - 16usize];
    ["Offset of field: io_sqring_offsets::dropped"]
        [::std::mem::offset_of!(io_sqring_offsets, dropped) - 20usize];
    ["Offset of field: io_sqring_offsets::array"]
        [::std::mem::offset_of!(io_sqring_offsets, array) - 24usize];
    ["Offset of field: io_sqring_offsets::resv1"]
        [::std::mem::offset_of!(io_sqring_offsets, resv1) - 28usize];
    ["Offset of field: io_sqring_offsets::resv2"]
        [::std::mem::offset_of!(io_sqring_offsets, resv2) - 32usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct io_cqring_offsets {
    pub head: __u32,
    pub tail: __u32,
    pub ring_mask: __u32,
    pub ring_entries: __u32,
    pub overflow: __u32,
    pub cqes: __u32,
    pub flags: __u32,
    pub resv1: __u32,
    pub resv2: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_cqring_offsets"][::std::mem::size_of::<io_cqring_offsets>() - 40usize];
    ["Alignment of io_cqring_offsets"][::std::mem::align_of::<io_cqring_offsets>() - 8usize];
    ["Offset of field: io_cqring_offsets::head"]
        [::std::mem::offset_of!(io_cqring_offsets, head) - 0usize];
    ["Offset of field: io_cqring_offsets::tail"]
        [::std::mem::offset_of!(io_cqring_offsets, tail) - 4usize];
    ["Offset of field: io_cqring_offsets::ring_mask"]
        [::std::mem::offset_of!(io_cqring_offsets, ring_mask) - 8usize];
    ["Offset of field: io_cqring_offsets::ring_entries"]
        [::std::mem::offset_of!(io_cqring_offsets, ring_entries) - 12usize];
    ["Offset of field: io_cqring_offsets::overflow"]
        [::std::mem::offset_of!(io_cqring_offsets, overflow) - 16usize];
    ["Offset of field: io_cqring_offsets::cqes"]
        [::std::mem::offset_of!(io_cqring_offsets, cqes) - 20usize];
    ["Offset of field: io_cqring_offsets::flags"]
        [::std::mem::offset_of!(io_cqring_offsets, flags) - 24usize];
    ["Offset of field: io_cqring_offsets::resv1"]
        [::std::mem::offset_of!(io_cqring_offsets, resv1) - 28usize];
    ["Offset of field: io_cqring_offsets::resv2"]
        [::std::mem::offset_of!(io_cqring_offsets, resv2) - 32usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct io_uring_params {
    pub sq_entries: __u32,
    pub cq_entries: __u32,
    pub flags: __u32,
    pub sq_thread_cpu: __u32,
    pub sq_thread_idle: __u32,
    pub features: __u32,
    pub wq_fd: __u32,
    pub resv: [__u32; 3usize],
    pub sq_off: io_sqring_offsets,
    pub cq_off: io_cqring_offsets,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_params"][::std::mem::size_of::<io_uring_params>() - 120usize];
    ["Alignment of io_uring_params"][::std::mem::align_of::<io_uring_params>() - 8usize];
    ["Offset of field: io_uring_params::sq_entries"]
        [::std::mem::offset_of!(io_uring_params, sq_entries) - 0usize];
    ["Offset of field: io_uring_params::cq_entries"]
        [::std::mem::offset_of!(io_uring_params, cq_entries) - 4usize];
    ["Offset of field: io_uring_params::flags"]
        [::std::mem::offset_of!(io_uring_params, flags) - 8usize];
    ["Offset of field: io_uring_params::sq_thread_cpu"]
        [::std::mem::offset_of!(io_uring_params, sq_thread_cpu) - 12usize];
    ["Offset of field: io_uring_params::sq_thread_idle"]
        [::std::mem::offset_of!(io_uring_params, sq_thread_idle) - 16usize];
    ["Offset of field: io_uring_params::features"]
        [::std::mem::offset_of!(io_uring_params, features) - 20usize];
    ["Offset of field: io_uring_params::wq_fd"]
        [::std::mem::offset_of!(io_uring_params, wq_fd) - 24usize];
    ["Offset of field: io_uring_params::resv"]
        [::std::mem::offset_of!(io_uring_params, resv) - 28usize];
    ["Offset of field: io_uring_params::sq_off"]
        [::std::mem::offset_of!(io_uring_params, sq_off) - 40usize];
    ["Offset of field: io_uring_params::cq_off"]
        [::std::mem::offset_of!(io_uring_params, cq_off) - 80usize];
};
pub const IORING_REGISTER_BUFFERS: _bindgen_ty_4 = 0;
pub const IORING_UNREGISTER_BUFFERS: _bindgen_ty_4 = 1;
pub const IORING_REGISTER_FILES: _bindgen_ty_4 = 2;
pub const IORING_UNREGISTER_FILES: _bindgen_ty_4 = 3;
pub const IORING_REGISTER_EVENTFD: _bindgen_ty_4 = 4;
pub const IORING_UNREGISTER_EVENTFD: _bindgen_ty_4 = 5;
pub const IORING_REGISTER_FILES_UPDATE: _bindgen_ty_4 = 6;
pub const IORING_REGISTER_EVENTFD_ASYNC: _bindgen_ty_4 = 7;
pub const IORING_REGISTER_PROBE: _bindgen_ty_4 = 8;
pub const IORING_REGISTER_PERSONALITY: _bindgen_ty_4 = 9;
pub const IORING_UNREGISTER_PERSONALITY: _bindgen_ty_4 = 10;
pub const IORING_REGISTER_RESTRICTIONS: _bindgen_ty_4 = 11;
pub const IORING_REGISTER_ENABLE_RINGS: _bindgen_ty_4 = 12;
pub const IORING_REGISTER_FILES2: _bindgen_ty_4 = 13;
pub const IORING_REGISTER_FILES_UPDATE2: _bindgen_ty_4 = 14;
pub const IORING_REGISTER_BUFFERS2: _bindgen_ty_4 = 15;
pub const IORING_REGISTER_BUFFERS_UPDATE: _bindgen_ty_4 = 16;
pub const IORING_REGISTER_IOWQ_AFF: _bindgen_ty_4 = 17;
pub const IORING_UNREGISTER_IOWQ_AFF: _bindgen_ty_4 = 18;
pub const IORING_REGISTER_IOWQ_MAX_WORKERS: _bindgen_ty_4 = 19;
pub const IORING_REGISTER_LAST: _bindgen_ty_4 = 20;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct io_uring_files_update {
    pub offset: __u32,
    pub resv: __u32,
    pub fds: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_files_update"][::std::mem::size_of::<io_uring_files_update>() - 16usize];
    ["Alignment of io_uring_files_update"]
        [::std::mem::align_of::<io_uring_files_update>() - 8usize];
    ["Offset of field: io_uring_files_update::offset"]
        [::std::mem::offset_of!(io_uring_files_update, offset) - 0usize];
    ["Offset of field: io_uring_files_update::resv"]
        [::std::mem::offset_of!(io_uring_files_update, resv) - 4usize];
    ["Offset of field: io_uring_files_update::fds"]
        [::std::mem::offset_of!(io_uring_files_update, fds) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct io_uring_rsrc_register {
    pub nr: __u32,
    pub resv: __u32,
    pub resv2: __u64,
    pub data: __u64,
    pub tags: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_rsrc_register"][::std::mem::size_of::<io_uring_rsrc_register>() - 32usize];
    ["Alignment of io_uring_rsrc_register"]
        [::std::mem::align_of::<io_uring_rsrc_register>() - 8usize];
    ["Offset of field: io_uring_rsrc_register::nr"]
        [::std::mem::offset_of!(io_uring_rsrc_register, nr) - 0usize];
    ["Offset of field: io_uring_rsrc_register::resv"]
        [::std::mem::offset_of!(io_uring_rsrc_register, resv) - 4usize];
    ["Offset of field: io_uring_rsrc_register::resv2"]
        [::std::mem::offset_of!(io_uring_rsrc_register, resv2) - 8usize];
    ["Offset of field: io_uring_rsrc_register::data"]
        [::std::mem::offset_of!(io_uring_rsrc_register, data) - 16usize];
    ["Offset of field: io_uring_rsrc_register::tags"]
        [::std::mem::offset_of!(io_uring_rsrc_register, tags) - 24usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct io_uring_rsrc_update {
    pub offset: __u32,
    pub resv: __u32,
    pub data: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_rsrc_update"][::std::mem::size_of::<io_uring_rsrc_update>() - 16usize];
    ["Alignment of io_uring_rsrc_update"][::std::mem::align_of::<io_uring_rsrc_update>() - 8usize];
    ["Offset of field: io_uring_rsrc_update::offset"]
        [::std::mem::offset_of!(io_uring_rsrc_update, offset) - 0usize];
    ["Offset of field: io_uring_rsrc_update::resv"]
        [::std::mem::offset_of!(io_uring_rsrc_update, resv) - 4usize];
    ["Offset of field: io_uring_rsrc_update::data"]
        [::std::mem::offset_of!(io_uring_rsrc_update, data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct io_uring_rsrc_update2 {
    pub offset: __u32,
    pub resv: __u32,
    pub data: __u64,
    pub tags: __u64,
    pub nr: __u32,
    pub resv2: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_rsrc_update2"][::std::mem::size_of::<io_uring_rsrc_update2>() - 32usize];
    ["Alignment of io_uring_rsrc_update2"]
        [::std::mem::align_of::<io_uring_rsrc_update2>() - 8usize];
    ["Offset of field: io_uring_rsrc_update2::offset"]
        [::std::mem::offset_of!(io_uring_rsrc_update2, offset) - 0usize];
    ["Offset of field: io_uring_rsrc_update2::resv"]
        [::std::mem::offset_of!(io_uring_rsrc_update2, resv) - 4usize];
    ["Offset of field: io_uring_rsrc_update2::data"]
        [::std::mem::offset_of!(io_uring_rsrc_update2, data) - 8usize];
    ["Offset of field: io_uring_rsrc_update2::tags"]
        [::std::mem::offset_of!(io_uring_rsrc_update2, tags) - 16usize];
    ["Offset of field: io_uring_rsrc_update2::nr"]
        [::std::mem::offset_of!(io_uring_rsrc_update2, nr) - 24usize];
    ["Offset of field: io_uring_rsrc_update2::resv2"]
        [::std::mem::offset_of!(io_uring_rsrc_update2, resv2) - 28usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct io_uring_probe_op {
    pub op: __u8,
    pub resv: __u8,
    pub flags: __u16,
    pub resv2: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_probe_op"][::std::mem::size_of::<io_uring_probe_op>() - 8usize];
    ["Alignment of io_uring_probe_op"][::std::mem::align_of::<io_uring_probe_op>() - 4usize];
    ["Offset of field: io_uring_probe_op::op"]
        [::std::mem::offset_of!(io_uring_probe_op, op) - 0usize];
    ["Offset of field: io_uring_probe_op::resv"]
        [::std::mem::offset_of!(io_uring_probe_op, resv) - 1usize];
    ["Offset of field: io_uring_probe_op::flags"]
        [::std::mem::offset_of!(io_uring_probe_op, flags) - 2usize];
    ["Offset of field: io_uring_probe_op::resv2"]
        [::std::mem::offset_of!(io_uring_probe_op, resv2) - 4usize];
};
#[repr(C)]
#[derive(Debug, Default)]
pub struct io_uring_probe {
    pub last_op: __u8,
    pub ops_len: __u8,
    pub resv: __u16,
    pub resv2: [__u32; 3usize],
    pub ops: __IncompleteArrayField<io_uring_probe_op>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_probe"][::std::mem::size_of::<io_uring_probe>() - 16usize];
    ["Alignment of io_uring_probe"][::std::mem::align_of::<io_uring_probe>() - 4usize];
    ["Offset of field: io_uring_probe::last_op"]
        [::std::mem::offset_of!(io_uring_probe, last_op) - 0usize];
    ["Offset of field: io_uring_probe::ops_len"]
        [::std::mem::offset_of!(io_uring_probe, ops_len) - 1usize];
    ["Offset of field: io_uring_probe::resv"]
        [::std::mem::offset_of!(io_uring_probe, resv) - 2usize];
    ["Offset of field: io_uring_probe::resv2"]
        [::std::mem::offset_of!(io_uring_probe, resv2) - 4usize];
    ["Offset of field: io_uring_probe::ops"][::std::mem::offset_of!(io_uring_probe, ops) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_uring_restriction {
    pub opcode: __u16,
    pub __bindgen_anon_1: io_uring_restriction__bindgen_ty_1,
    pub resv: __u8,
    pub resv2: [__u32; 3usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union io_uring_restriction__bindgen_ty_1 {
    pub register_op: __u8,
    pub sqe_op: __u8,
    pub sqe_flags: __u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_restriction__bindgen_ty_1"]
        [::std::mem::size_of::<io_uring_restriction__bindgen_ty_1>() - 1usize];
    ["Alignment of io_uring_restriction__bindgen_ty_1"]
        [::std::mem::align_of::<io_uring_restriction__bindgen_ty_1>() - 1usize];
    ["Offset of field: io_uring_restriction__bindgen_ty_1::register_op"]
        [::std::mem::offset_of!(io_uring_restriction__bindgen_ty_1, register_op) - 0usize];
    ["Offset of field: io_uring_restriction__bindgen_ty_1::sqe_op"]
        [::std::mem::offset_of!(io_uring_restriction__bindgen_ty_1, sqe_op) - 0usize];
    ["Offset of field: io_uring_restriction__bindgen_ty_1::sqe_flags"]
        [::std::mem::offset_of!(io_uring_restriction__bindgen_ty_1, sqe_flags) - 0usize];
};
impl Default for io_uring_restriction__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_restriction"][::std::mem::size_of::<io_uring_restriction>() - 16usize];
    ["Alignment of io_uring_restriction"][::std::mem::align_of::<io_uring_restriction>() - 4usize];
    ["Offset of field: io_uring_restriction::opcode"]
        [::std::mem::offset_of!(io_uring_restriction, opcode) - 0usize];
    ["Offset of field: io_uring_restriction::resv"]
        [::std::mem::offset_of!(io_uring_restriction, resv) - 3usize];
    ["Offset of field: io_uring_restriction::resv2"]
        [::std::mem::offset_of!(io_uring_restriction, resv2) - 4usize];
};
impl Default for io_uring_restriction {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IORING_RESTRICTION_REGISTER_OP: _bindgen_ty_6 = 0;
pub const IORING_RESTRICTION_SQE_OP: _bindgen_ty_6 = 1;
pub const IORING_RESTRICTION_SQE_FLAGS_ALLOWED: _bindgen_ty_6 = 2;
pub const IORING_RESTRICTION_SQE_FLAGS_REQUIRED: _bindgen_ty_6 = 3;
pub const IORING_RESTRICTION_LAST: _bindgen_ty_6 = 4;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct io_uring_getevents_arg {
    pub sigmask: __u64,
    pub sigmask_sz: __u32,
    pub pad: __u32,
    pub ts: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_getevents_arg"][::std::mem::size_of::<io_uring_getevents_arg>() - 24usize];
    ["Alignment of io_uring_getevents_arg"]
        [::std::mem::align_of::<io_uring_getevents_arg>() - 8usize];
    ["Offset of field: io_uring_getevents_arg::sigmask"]
        [::std::mem::offset_of!(io_uring_getevents_arg, sigmask) - 0usize];
    ["Offset of field: io_uring_getevents_arg::sigmask_sz"]
        [::std::mem::offset_of!(io_uring_getevents_arg, sigmask_sz) - 8usize];
    ["Offset of field: io_uring_getevents_arg::pad"]
        [::std::mem::offset_of!(io_uring_getevents_arg, pad) - 12usize];
    ["Offset of field: io_uring_getevents_arg::ts"]
        [::std::mem::offset_of!(io_uring_getevents_arg, ts) - 16usize];
};
